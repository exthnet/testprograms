! -*- f90 -*-
program test
  use cudafor
  implicit none
  real(kind=8), dimension(:,:), pointer, managed :: A1, B1, C1
  real(kind=8), dimension(:,:), pointer, managed :: A2, B2, C2
  real(kind=8), dimension(:,:), pointer, managed :: A3, B3, C3
  real(kind=8), dimension(:,:), pointer, managed :: A4, B4, C4
  real(kind=8), pointer, managed :: pa1(:,:), pb1(:,:), pc1(:,:)
  real(kind=8), pointer, managed :: pa2(:,:), pb2(:,:), pc2(:,:)
  real(kind=8), pointer, managed :: pa3(:,:), pb3(:,:), pc3(:,:)
  real(kind=8), pointer, managed :: pa4(:,:), pb4(:,:), pc4(:,:)
  integer :: N, nargs, nlength, nstatus, i, j, k
  integer :: ret
  integer(kind=cuda_stream_kind) :: stream1
  integer(kind=cuda_stream_kind) :: stream2
  character*256 :: value

  nargs=command_argument_count()
  if(nargs>0)then
     call get_command_argument(1,value,nlength,nstatus)
     read(value,*) N
  else
     N = 10
  end if
  write(*,*)"N=",N

  allocate(A1(N,N), B1(N,N), C1(N,N))
  allocate(A2(N,N), B2(N,N), C2(N,N))
  allocate(A3(N,N), B3(N,N), C3(N,N))
  allocate(A4(N,N), B4(N,N), C4(N,N))

  do i = 1, N
     do j = 1, N
        A1(i,j) = 1.0d0
        B1(i,j) = 2.0d0
        C1(i,j) = 3.0d0
     end do
  end do
  do i = 1, N
     do j = 1, N
        A2(i,j) = 1.0d0
        B2(i,j) = 2.0d0
        C2(i,j) = 3.0d0
     end do
  end do
  do i = 1, N
     do j = 1, N
        A3(i,j) = 1.0d0
        B3(i,j) = 2.0d0
        C3(i,j) = 3.0d0
     end do
  end do
  do i = 1, N
     do j = 1, N
        A4(i,j) = 1.0d0
        B4(i,j) = 2.0d0
        C4(i,j) = 3.0d0
     end do
  end do

  ret = cudaStreamCreate(stream1)
  ret = cudaStreamSynchronize(stream1)

  pa1 => A1; pb1 => B1; pc1 => C1
  pa2 => A2; pb2 => B2; pc2 => C2
  pa3 => A3; pb3 => B3; pc3 => C3
  pa4 => A4; pb4 => B4; pc4 => C4

  ret = cudaStreamCreate(stream1)
  ret = cudaStreamSynchronize(stream1)

  ret = cudaMemPrefetchAsync(pa2, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pb2, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pc2, N*N*8, 0, stream1)

  !$cuf kernel do(2) <<<*,*,0,stream1>>>
  do i = 1, N
     do j = 1, N
        do k = 1, 10
        pc1(i,j) = pc1(i,j) + pa1(i,j) + pb1(i,j) + 0.1d0
     end do
     end do
  end do

  ret = cudaMemPrefetchAsync(pa4, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pb4, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pc4, N*N*8, 0, stream1)

  !$cuf kernel do(2) <<<*,*,0,stream1>>>
  do i = 1, N
     do j = 1, N
        do k = 1, 10
        pc2(i,j) = pc2(i,j) + pa2(i,j) * pb2(i,j) + 0.2d0
     end do
     end do
  end do

  ret = cudaMemPrefetchAsync(pa3, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pb3, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pc3, N*N*8, 0, stream1)

  !$cuf kernel do(2) <<<*,*,0,stream1>>>
  do i = 1, N
     do j = 1, N
        do k = 1, 10
        pc4(i,j) = pc4(i,j) + pa4(i,j) + pb4(i,j) + 0.3d0
     end do
     end do
  end do

  ret = cudaMemPrefetchAsync(pa1, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pb1, N*N*8, 0, stream1)
  ret = cudaMemPrefetchAsync(pc1, N*N*8, 0, stream1)

  !$cuf kernel do(2) <<<*,*,0,stream1>>>
  do i = 1, N
     do j = 1, N
        do k = 1, 10
        pc3(i,j) = pc3(i,j) + pa3(i,j) * pb3(i,j) + 0.4d0
     end do
     end do
  end do

  !$cuf kernel do(2) <<<*,*,0,stream1>>>
  do i = 1, N
     do j = 1, N
        do k = 1, 10
        pc1(i,j) = pc1(i,j) + a1(i,j) + pb1(i,j) + 0.5d0
     end do
     end do
  end do

  ret = cudaStreamSynchronize(stream1)
  ret = cudaStreamDestroy(stream1)
  !print *, C
  deallocate(A1, B1, C1)
  deallocate(A2, B2, C2)
  deallocate(A3, B3, C3)
  deallocate(A4, B4, C4)
end program test
